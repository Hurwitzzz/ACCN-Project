// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module EntryConv_EntryConv_Pipeline_VITIS_LOOP_8_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln8,
        sext_ln8_1,
        w_2_033_out,
        w_2_033_out_ap_vld,
        w_1_032_out,
        w_1_032_out_ap_vld,
        w_0_031_out,
        w_0_031_out_ap_vld,
        x_2_030_out,
        x_2_030_out_ap_vld,
        x_1_029_out,
        x_1_029_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [61:0] sext_ln8;
input  [61:0] sext_ln8_1;
output  [31:0] w_2_033_out;
output   w_2_033_out_ap_vld;
output  [31:0] w_1_032_out;
output   w_1_032_out_ap_vld;
output  [31:0] w_0_031_out;
output   w_0_031_out_ap_vld;
output  [31:0] x_2_030_out;
output   x_2_030_out_ap_vld;
output  [31:0] x_1_029_out;
output   x_1_029_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg w_2_033_out_ap_vld;
reg w_1_032_out_ap_vld;
reg w_0_031_out_ap_vld;
reg x_2_030_out_ap_vld;
reg x_1_029_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] icmp_ln8_reg_436;
reg    ap_block_state2_io;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
reg    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln9_reg_446;
reg   [0:0] icmp_ln9_reg_446_pp0_iter4_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire  signed [62:0] sext_ln8_1_cast_fu_167_p1;
reg  signed [62:0] sext_ln8_1_cast_reg_423;
reg   [1:0] i_1_reg_428;
wire   [0:0] icmp_ln8_fu_183_p2;
reg   [0:0] icmp_ln8_reg_436_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_436_pp0_iter2_reg;
reg   [0:0] icmp_ln8_reg_436_pp0_iter3_reg;
reg   [0:0] icmp_ln8_reg_436_pp0_iter4_reg;
reg   [63:0] gmem_addr_reg_440;
wire   [0:0] icmp_ln9_fu_245_p2;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln9_reg_446_pp0_iter1_reg;
reg   [0:0] icmp_ln9_reg_446_pp0_iter2_reg;
reg   [0:0] icmp_ln9_reg_446_pp0_iter3_reg;
wire   [0:0] icmp_ln9_1_fu_250_p2;
reg   [0:0] icmp_ln9_1_reg_452;
reg   [0:0] icmp_ln9_1_reg_452_pp0_iter1_reg;
reg   [0:0] icmp_ln9_1_reg_452_pp0_iter2_reg;
reg   [0:0] icmp_ln9_1_reg_452_pp0_iter3_reg;
reg   [0:0] icmp_ln9_1_reg_452_pp0_iter4_reg;
reg   [63:0] gmem_addr_1_reg_460;
reg   [31:0] gmem_addr_read_reg_466;
reg   [31:0] gmem_addr_1_read_reg_471;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] sext_ln9_1_fu_199_p1;
wire  signed [63:0] sext_ln11_fu_260_p1;
reg   [1:0] i_fu_72;
wire   [1:0] add_ln8_fu_209_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
reg   [31:0] w_2_1_fu_76;
wire   [31:0] w_2_8_fu_306_p3;
reg   [31:0] w_2_2_fu_80;
wire   [31:0] w_2_7_fu_299_p3;
reg   [31:0] w_2_3_fu_84;
wire   [31:0] w_2_fu_291_p3;
reg   [31:0] x_2_fu_88;
wire   [31:0] x_2_6_fu_344_p3;
reg   [31:0] x_2_3_fu_92;
wire   [31:0] x_2_5_fu_337_p3;
reg    ap_block_pp0_stage1_01001;
wire   [62:0] i_cast8_fu_189_p1;
wire  signed [62:0] sext_ln8_cast_fu_171_p1;
wire   [62:0] add_ln9_1_fu_193_p2;
wire   [3:0] shl_ln9_fu_214_p3;
wire   [3:0] add_ln9_fu_221_p2;
wire   [1:0] trunc_ln9_fu_227_p4;
wire  signed [61:0] sext_ln9_fu_237_p1;
wire   [62:0] zext_ln9_fu_241_p1;
wire   [62:0] add_ln11_fu_255_p2;
wire   [0:0] or_ln9_fu_287_p2;
wire   [31:0] w_0_fu_284_p1;
wire   [31:0] x_1_fu_334_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

EntryConv_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_72 <= 2'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_436 == 1'd0))) begin
        i_fu_72 <= add_ln8_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        gmem_addr_read_reg_466 <= m_axi_gmem_RDATA;
        icmp_ln9_1_reg_452_pp0_iter1_reg <= icmp_ln9_1_reg_452;
        icmp_ln9_1_reg_452_pp0_iter2_reg <= icmp_ln9_1_reg_452_pp0_iter1_reg;
        icmp_ln9_1_reg_452_pp0_iter3_reg <= icmp_ln9_1_reg_452_pp0_iter2_reg;
        icmp_ln9_1_reg_452_pp0_iter4_reg <= icmp_ln9_1_reg_452_pp0_iter3_reg;
        icmp_ln9_reg_446_pp0_iter1_reg <= icmp_ln9_reg_446;
        icmp_ln9_reg_446_pp0_iter2_reg <= icmp_ln9_reg_446_pp0_iter1_reg;
        icmp_ln9_reg_446_pp0_iter3_reg <= icmp_ln9_reg_446_pp0_iter2_reg;
        icmp_ln9_reg_446_pp0_iter4_reg <= icmp_ln9_reg_446_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_1_read_reg_471 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_436 == 1'd0))) begin
        gmem_addr_1_reg_460 <= sext_ln11_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_reg_440 <= sext_ln9_1_fu_199_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_428 <= ap_sig_allocacmp_i_1;
        icmp_ln8_reg_436 <= icmp_ln8_fu_183_p2;
        icmp_ln8_reg_436_pp0_iter1_reg <= icmp_ln8_reg_436;
        icmp_ln8_reg_436_pp0_iter2_reg <= icmp_ln8_reg_436_pp0_iter1_reg;
        icmp_ln8_reg_436_pp0_iter3_reg <= icmp_ln8_reg_436_pp0_iter2_reg;
        icmp_ln8_reg_436_pp0_iter4_reg <= icmp_ln8_reg_436_pp0_iter3_reg;
        sext_ln8_1_cast_reg_423 <= sext_ln8_1_cast_fu_167_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_436 == 1'd0))) begin
        icmp_ln9_1_reg_452 <= icmp_ln9_1_fu_250_p2;
        icmp_ln9_reg_446 <= icmp_ln9_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_2_1_fu_76 <= w_2_8_fu_306_p3;
        w_2_2_fu_80 <= w_2_7_fu_299_p3;
        w_2_3_fu_84 <= w_2_fu_291_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        x_2_3_fu_92 <= x_2_5_fu_337_p3;
        x_2_fu_88 <= x_2_6_fu_344_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln8_reg_436 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446 == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln8_reg_436 == 1'd0)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_460;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_436 == 1'd0))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_440;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_436 == 1'd0)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_436_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_0_031_out_ap_vld = 1'b1;
    end else begin
        w_0_031_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_436_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_1_032_out_ap_vld = 1'b1;
    end else begin
        w_1_032_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_436_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_2_033_out_ap_vld = 1'b1;
    end else begin
        w_2_033_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_436_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        x_1_029_out_ap_vld = 1'b1;
    end else begin
        x_1_029_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_436_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        x_2_030_out_ap_vld = 1'b1;
    end else begin
        x_2_030_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_255_p2 = ($signed(zext_ln9_fu_241_p1) + $signed(sext_ln8_1_cast_reg_423));

assign add_ln8_fu_209_p2 = (i_1_reg_428 + 2'd1);

assign add_ln9_1_fu_193_p2 = ($signed(i_cast8_fu_189_p1) + $signed(sext_ln8_cast_fu_171_p1));

assign add_ln9_fu_221_p2 = ($signed(shl_ln9_fu_214_p3) + $signed(4'd12));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln9_reg_446_pp0_iter4_reg == 1'd0));
end

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln8_reg_436 == 1'd0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln9_reg_446 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign i_cast8_fu_189_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln8_fu_183_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln9_1_fu_250_p2 = ((i_1_reg_428 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_245_p2 = ((i_1_reg_428 == 2'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign or_ln9_fu_287_p2 = (icmp_ln9_reg_446_pp0_iter4_reg | icmp_ln9_1_reg_452_pp0_iter4_reg);

assign sext_ln11_fu_260_p1 = $signed(add_ln11_fu_255_p2);

assign sext_ln8_1_cast_fu_167_p1 = $signed(sext_ln8_1);

assign sext_ln8_cast_fu_171_p1 = $signed(sext_ln8);

assign sext_ln9_1_fu_199_p1 = $signed(add_ln9_1_fu_193_p2);

assign sext_ln9_fu_237_p1 = $signed(trunc_ln9_fu_227_p4);

assign shl_ln9_fu_214_p3 = {{i_1_reg_428}, {2'd0}};

assign trunc_ln9_fu_227_p4 = {{add_ln9_fu_221_p2[3:2]}};

assign w_0_031_out = w_2_1_fu_76;

assign w_0_fu_284_p1 = gmem_addr_read_reg_466;

assign w_1_032_out = w_2_2_fu_80;

assign w_2_033_out = w_2_3_fu_84;

assign w_2_7_fu_299_p3 = ((icmp_ln9_1_reg_452_pp0_iter4_reg[0:0] == 1'b1) ? w_0_fu_284_p1 : w_2_2_fu_80);

assign w_2_8_fu_306_p3 = ((icmp_ln9_reg_446_pp0_iter4_reg[0:0] == 1'b1) ? w_0_fu_284_p1 : w_2_1_fu_76);

assign w_2_fu_291_p3 = ((or_ln9_fu_287_p2[0:0] == 1'b1) ? w_2_3_fu_84 : w_0_fu_284_p1);

assign x_1_029_out = x_2_fu_88;

assign x_1_fu_334_p1 = gmem_addr_1_read_reg_471;

assign x_2_030_out = x_2_3_fu_92;

assign x_2_5_fu_337_p3 = ((icmp_ln9_1_reg_452_pp0_iter4_reg[0:0] == 1'b1) ? x_2_3_fu_92 : x_1_fu_334_p1);

assign x_2_6_fu_344_p3 = ((icmp_ln9_1_reg_452_pp0_iter4_reg[0:0] == 1'b1) ? x_1_fu_334_p1 : x_2_fu_88);

assign zext_ln9_fu_241_p1 = $unsigned(sext_ln9_fu_237_p1);

endmodule //EntryConv_EntryConv_Pipeline_VITIS_LOOP_8_1
